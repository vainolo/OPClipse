/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package com.vainolo.phd.opmodel.model.provider;

import com.vainolo.phd.opmodel.model.util.opmodelAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class opmodelItemProviderAdapterFactory extends opmodelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public opmodelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.vainolo.phd.opmodel.model.keyValuePair} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected keyValuePairItemProvider keyValuePairItemProvider;

	/**
	 * This creates an adapter for a {@link com.vainolo.phd.opmodel.model.keyValuePair}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createkeyValuePairAdapter() {
		if (keyValuePairItemProvider == null) {
			keyValuePairItemProvider = new keyValuePairItemProvider(this);
		}

		return keyValuePairItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.vainolo.phd.opmodel.model.NodeInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeInstanceItemProvider nodeInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link com.vainolo.phd.opmodel.model.NodeInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeInstanceAdapter() {
		if (nodeInstanceItemProvider == null) {
			nodeInstanceItemProvider = new NodeInstanceItemProvider(this);
		}

		return nodeInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.vainolo.phd.opmodel.model.LinkInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkInstanceItemProvider linkInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link com.vainolo.phd.opmodel.model.LinkInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkInstanceAdapter() {
		if (linkInstanceItemProvider == null) {
			linkInstanceItemProvider = new LinkInstanceItemProvider(this);
		}

		return linkInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.vainolo.phd.opmodel.model.ContainerInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContainerInstanceItemProvider containerInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link com.vainolo.phd.opmodel.model.ContainerInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContainerInstanceAdapter() {
		if (containerInstanceItemProvider == null) {
			containerInstanceItemProvider = new ContainerInstanceItemProvider(this);
		}

		return containerInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.vainolo.phd.opmodel.model.ThingInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ThingInstanceItemProvider thingInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link com.vainolo.phd.opmodel.model.ThingInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createThingInstanceAdapter() {
		if (thingInstanceItemProvider == null) {
			thingInstanceItemProvider = new ThingInstanceItemProvider(this);
		}

		return thingInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.vainolo.phd.opmodel.model.TypeDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeDescriptorItemProvider typeDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link com.vainolo.phd.opmodel.model.TypeDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeDescriptorAdapter() {
		if (typeDescriptorItemProvider == null) {
			typeDescriptorItemProvider = new TypeDescriptorItemProvider(this);
		}

		return typeDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.vainolo.phd.opmodel.model.PropertyDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyDescriptorItemProvider propertyDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link com.vainolo.phd.opmodel.model.PropertyDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyDescriptorAdapter() {
		if (propertyDescriptorItemProvider == null) {
			propertyDescriptorItemProvider = new PropertyDescriptorItemProvider(this);
		}

		return propertyDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.vainolo.phd.opmodel.model.OPmodelHolder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OPmodelHolderItemProvider oPmodelHolderItemProvider;

	/**
	 * This creates an adapter for a {@link com.vainolo.phd.opmodel.model.OPmodelHolder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOPmodelHolderAdapter() {
		if (oPmodelHolderItemProvider == null) {
			oPmodelHolderItemProvider = new OPmodelHolderItemProvider(this);
		}

		return oPmodelHolderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.vainolo.phd.opmodel.model.OPmetaDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OPmetaDefinitionItemProvider oPmetaDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link com.vainolo.phd.opmodel.model.OPmetaDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOPmetaDefinitionAdapter() {
		if (oPmetaDefinitionItemProvider == null) {
			oPmetaDefinitionItemProvider = new OPmetaDefinitionItemProvider(this);
		}

		return oPmetaDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.vainolo.phd.opmodel.model.PropertyInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyInstanceItemProvider propertyInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link com.vainolo.phd.opmodel.model.PropertyInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyInstanceAdapter() {
		if (propertyInstanceItemProvider == null) {
			propertyInstanceItemProvider = new PropertyInstanceItemProvider(this);
		}

		return propertyInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.vainolo.phd.opmodel.model.PropertyIntInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyIntInstanceItemProvider propertyIntInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link com.vainolo.phd.opmodel.model.PropertyIntInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyIntInstanceAdapter() {
		if (propertyIntInstanceItemProvider == null) {
			propertyIntInstanceItemProvider = new PropertyIntInstanceItemProvider(this);
		}

		return propertyIntInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.vainolo.phd.opmodel.model.PropertyFloatInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyFloatInstanceItemProvider propertyFloatInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link com.vainolo.phd.opmodel.model.PropertyFloatInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyFloatInstanceAdapter() {
		if (propertyFloatInstanceItemProvider == null) {
			propertyFloatInstanceItemProvider = new PropertyFloatInstanceItemProvider(this);
		}

		return propertyFloatInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.vainolo.phd.opmodel.model.PropertyBooleanInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyBooleanInstanceItemProvider propertyBooleanInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link com.vainolo.phd.opmodel.model.PropertyBooleanInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyBooleanInstanceAdapter() {
		if (propertyBooleanInstanceItemProvider == null) {
			propertyBooleanInstanceItemProvider = new PropertyBooleanInstanceItemProvider(this);
		}

		return propertyBooleanInstanceItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (keyValuePairItemProvider != null) keyValuePairItemProvider.dispose();
		if (nodeInstanceItemProvider != null) nodeInstanceItemProvider.dispose();
		if (linkInstanceItemProvider != null) linkInstanceItemProvider.dispose();
		if (containerInstanceItemProvider != null) containerInstanceItemProvider.dispose();
		if (thingInstanceItemProvider != null) thingInstanceItemProvider.dispose();
		if (typeDescriptorItemProvider != null) typeDescriptorItemProvider.dispose();
		if (propertyDescriptorItemProvider != null) propertyDescriptorItemProvider.dispose();
		if (oPmodelHolderItemProvider != null) oPmodelHolderItemProvider.dispose();
		if (oPmetaDefinitionItemProvider != null) oPmetaDefinitionItemProvider.dispose();
		if (propertyInstanceItemProvider != null) propertyInstanceItemProvider.dispose();
		if (propertyIntInstanceItemProvider != null) propertyIntInstanceItemProvider.dispose();
		if (propertyFloatInstanceItemProvider != null) propertyFloatInstanceItemProvider.dispose();
		if (propertyBooleanInstanceItemProvider != null) propertyBooleanInstanceItemProvider.dispose();
	}

}
