/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package com.vainolo.phd.opmeta.model.provider;

import com.vainolo.phd.opmeta.model.util.opmetaAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class opmetaItemProviderAdapterFactory extends opmetaAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public opmetaItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.vainolo.phd.opmeta.model.OPMetaModelDiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OPMetaModelDiagramItemProvider opMetaModelDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link com.vainolo.phd.opmeta.model.OPMetaModelDiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOPMetaModelDiagramAdapter() {
		if (opMetaModelDiagramItemProvider == null) {
			opMetaModelDiagramItemProvider = new OPMetaModelDiagramItemProvider(this);
		}

		return opMetaModelDiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.vainolo.phd.opmeta.model.OPMetaModelContaimentValidationRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OPMetaModelContaimentValidationRuleItemProvider opMetaModelContaimentValidationRuleItemProvider;

	/**
	 * This creates an adapter for a {@link com.vainolo.phd.opmeta.model.OPMetaModelContaimentValidationRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOPMetaModelContaimentValidationRuleAdapter() {
		if (opMetaModelContaimentValidationRuleItemProvider == null) {
			opMetaModelContaimentValidationRuleItemProvider = new OPMetaModelContaimentValidationRuleItemProvider(this);
		}

		return opMetaModelContaimentValidationRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.vainolo.phd.opmeta.model.OPMetaModelLinkValidationRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OPMetaModelLinkValidationRuleItemProvider opMetaModelLinkValidationRuleItemProvider;

	/**
	 * This creates an adapter for a {@link com.vainolo.phd.opmeta.model.OPMetaModelLinkValidationRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOPMetaModelLinkValidationRuleAdapter() {
		if (opMetaModelLinkValidationRuleItemProvider == null) {
			opMetaModelLinkValidationRuleItemProvider = new OPMetaModelLinkValidationRuleItemProvider(this);
		}

		return opMetaModelLinkValidationRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.vainolo.phd.opmeta.model.OPModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OPModelItemProvider opModelItemProvider;

	/**
	 * This creates an adapter for a {@link com.vainolo.phd.opmeta.model.OPModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOPModelAdapter() {
		if (opModelItemProvider == null) {
			opModelItemProvider = new OPModelItemProvider(this);
		}

		return opModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.vainolo.phd.opmeta.model.NodeInstanceBase} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeInstanceBaseItemProvider nodeInstanceBaseItemProvider;

	/**
	 * This creates an adapter for a {@link com.vainolo.phd.opmeta.model.NodeInstanceBase}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeInstanceBaseAdapter() {
		if (nodeInstanceBaseItemProvider == null) {
			nodeInstanceBaseItemProvider = new NodeInstanceBaseItemProvider(this);
		}

		return nodeInstanceBaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.vainolo.phd.opmeta.model.ContainerInstanceBase} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContainerInstanceBaseItemProvider containerInstanceBaseItemProvider;

	/**
	 * This creates an adapter for a {@link com.vainolo.phd.opmeta.model.ContainerInstanceBase}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContainerInstanceBaseAdapter() {
		if (containerInstanceBaseItemProvider == null) {
			containerInstanceBaseItemProvider = new ContainerInstanceBaseItemProvider(this);
		}

		return containerInstanceBaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.vainolo.phd.opmeta.model.LinkInstanceBase} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkInstanceBaseItemProvider linkInstanceBaseItemProvider;

	/**
	 * This creates an adapter for a {@link com.vainolo.phd.opmeta.model.LinkInstanceBase}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkInstanceBaseAdapter() {
		if (linkInstanceBaseItemProvider == null) {
			linkInstanceBaseItemProvider = new LinkInstanceBaseItemProvider(this);
		}

		return linkInstanceBaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.vainolo.phd.opmeta.model.ThingInstanceBase} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ThingInstanceBaseItemProvider thingInstanceBaseItemProvider;

	/**
	 * This creates an adapter for a {@link com.vainolo.phd.opmeta.model.ThingInstanceBase}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createThingInstanceBaseAdapter() {
		if (thingInstanceBaseItemProvider == null) {
			thingInstanceBaseItemProvider = new ThingInstanceBaseItemProvider(this);
		}

		return thingInstanceBaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.vainolo.phd.opmeta.model.KeyValuePair} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KeyValuePairItemProvider keyValuePairItemProvider;

	/**
	 * This creates an adapter for a {@link com.vainolo.phd.opmeta.model.KeyValuePair}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKeyValuePairAdapter() {
		if (keyValuePairItemProvider == null) {
			keyValuePairItemProvider = new KeyValuePairItemProvider(this);
		}

		return keyValuePairItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (opMetaModelDiagramItemProvider != null) opMetaModelDiagramItemProvider.dispose();
		if (opMetaModelContaimentValidationRuleItemProvider != null) opMetaModelContaimentValidationRuleItemProvider.dispose();
		if (opMetaModelLinkValidationRuleItemProvider != null) opMetaModelLinkValidationRuleItemProvider.dispose();
		if (opModelItemProvider != null) opModelItemProvider.dispose();
		if (nodeInstanceBaseItemProvider != null) nodeInstanceBaseItemProvider.dispose();
		if (containerInstanceBaseItemProvider != null) containerInstanceBaseItemProvider.dispose();
		if (linkInstanceBaseItemProvider != null) linkInstanceBaseItemProvider.dispose();
		if (thingInstanceBaseItemProvider != null) thingInstanceBaseItemProvider.dispose();
		if (keyValuePairItemProvider != null) keyValuePairItemProvider.dispose();
	}

}
